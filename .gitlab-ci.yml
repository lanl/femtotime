# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages:          # List of stages for jobs, and their order of execution
  # - prepare
  - test

prepare-job:
  stage: prepare
  cache:
    paths:
      - /builds/diorama/${CI_PROJECT_NAME}/*
      - /builds/diorama/${CI_PROJECT_NAME}
  artifacts:
    when: 
    paths:
      - /builds/diorama/${CI_PROJECT_NAME}/*
      - /builds/diorama/${CI_PROJECT_NAME}
  script:
    # - pip3 install --user --upgrade meson
    # - find / -xdev -name meson -ls
    # - export PATH=/root/.local/bin:/opt/rh/devtoolset-11/root/usr/bin:$PATH
    # - meson --version || true
    - echo "not much prep"

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: always
    - if: $CI_PIPELINE_SOURCE == "push"
      when: always
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - when: never
  artifacts:
    when: always
    paths:
      - _mbuild/cppunitTestResults.xml
      - _mbuild/meson-logs/testlog.junit.xml
    reports:
      junit: _mbuild/meson-logs/testlog.junit.xml
  script:
    # - pip3 install --user --upgrade meson
    - . /usr/local/src/lanl-proxy-bashrc-snippet
    # - export DIO_REPO_BASE=/builds/diorama
    # - export DIO_LOCAL_PREFIX=${CI_PROJECT_DIR}/ULOCAL
    # - echo "setting diorama and other path variables based on $DIO_LOCAL_PREFIX"
    # - . /usr/share/diorama-bootstrap/diorama-bashrc-snippet
    - find / -xdev -name meson -ls
    - export PATH=/root/.local/bin:/opt/rh/devtoolset-11/root/usr/bin:$PATH
    # - export PATH=/root/.local/bin:$PATH
    - git branch
    - echo "Building and running unit tests..."
    - /bin/rm -rf _mbuild
    - meson _mbuild
    - meson test -C _mbuild --suite unit
    - echo "Ran the meson unit tests."

coverage-gcovr:   # This job also runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  rules:
    - if: $CI_PIPELINE_SOURCE == "trigger"
      when: always
    - if: $CI_PIPELINE_SOURCE == "push"
      when: always
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - when: never
  cache:
    key: diorama-ccache-single-key
    paths:
      - ${CI_PROJECT_DIR}/.ccache
  script:
    - cat gcovr.cfg || true
    - grep '"PURPOSE":"NightlyCoverage"' ${TRIGGER_PAYLOAD} && echo "AND_IS_EXECUTED"
    - echo "setting http proxy for Los Alamos"
    - . /usr/local/src/lanl-proxy-bashrc-snippet
    - . /usr/share/diorama-bootstrap/diorama-bashrc-snippet
    - gcovr --version || true
    - pip3 install gcovr --upgrade --user
    - gcovr --version || true
    - export PATH=/root/.local/bin:/opt/rh/devtoolset-11/root/usr/bin:$PATH
    - gcovr --version || true
    - meson _mbuildcov -Db_coverage=true    # first configure
    - meson test -C _mbuildcov --suite=unit # then the unit test
    - ninja coverage -C _mbuildcov # then the coverage reports
    - echo "Ran the meson-based coverage tests with gcovr."
  coverage: /^\s*lines\.*:\s*\d+.\d+\%/
  artifacts:
    when: always
    expose_as: 'coverage-gcovr'
    public: true
    paths:
      - _mbuildcov/meson-logs/coverage.xml
      - _mbuildcov/meson-logs/coveragereport/
    expire_in: 3 months
    reports:
      coverage_report:
        coverage_format: cobertura
        path: _mbuildcov/meson-logs/coverage.xml
